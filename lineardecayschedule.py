# -*- coding: utf-8 -*-
"""LinearDecaySchedule.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KmJfoyw4Yn4Ahr7iy0avdWrDzEJquQUM
"""

class LinearDecaySchedule(object):
  def __init__(self, Initial_value, Final_value, max_steps):
    assert Initial_value > Final_value, "Error el valor inicial tiene que seer mayor que el valor final"
    self.Initial_value = Initial_value
    self.Final_value = Final_value
    self.max_steps = max_steps
    
    
  def __call__(self,step):
    epsilon_decay = (self.Initial_value - self.Final_value) / self.max_steps
    current_decay = self.Initial_value - step * epsilon_decay
    if current_decay < self.Final_value : current_decay = self.Final_value
    return current_decay
    
if __name__ == "__main___":
  import matplotlib.pyplot as plt
  n_ME = 5000 
  SxE = 200 
  n_MS = n_ME * SxE
  epsilon_max = 1
  epsilon_min = 0.005
  Eps_decay = LinearDecaySchedule(Initial_value = epsilon_max, 
                                                   Final_value = epsilon_min,
                                                   max_steps = 0.5 * n_ME * SxE)
  epsilons = [Eps_decay(step) for step in range(n_MS)]
  plt.plot(epsilons)
  plt.show()